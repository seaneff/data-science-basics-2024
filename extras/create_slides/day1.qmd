---
title: "Data Science Basics in R, Day 1"
subtitle: "Intro to statistical programming"
from: revealjs
format:
  revealjs: 
    transition: none
    auto-stretch: true
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    theme: seaneffquarto.scss
    df-print: paged
---

[comment]: <> (to generate PDF for sharing, run final doc with title: "Data Science Basics in R, Day 1"
subtitle: "Intro to statistical programming" from: revealjs format: pdf above (with appropriate spacing))

## Introductions
::: {.incremental}
- Your name
- What you do for school, work, and/or fun
- Why you signed up for this class
- Have you ever used R before?
:::

## Housekeeping notes

::: {.incremental}
- Take a break whenever you need one, we will also have a few structured breaks as a larger group
- Outlet locations
- Trash cans
- Try to come with a charged laptop
- If you have questions, you can find me at *sde31@georgetown.edu*
:::

## Housekeeping notes

<center>
All course materials are on github, 
we’ll talk more about github starting tomorrow

<https://github.com/seaneff/data-science-basics-2024>

</center>

## What to expect: Learning R

::: {.incremental}
- Learning R is fun! And also frustrating.
- You won’t be an expert by the end of these 4 days.
- But over time and as you practice, it gets easier!
::: 

## What to expect: The next 4 days

::: {.incremental}
- We’ll balance slides/demos with hands-on exercises
- You decide how you learn best
  - listening with your computer away
  - laptop out and typing along
  - taking notes with paper/pen
- All of these slides, course notes, and other materials are publicly accessible on github
::: 

## Workshop goals

<center>
This workshop will build literacy and basic proficiency in statistical programming, with a focus on the skills needed to conduct data analyses in professional healthcare and public health workplaces. 
<br><br>
We will cover the basics of data management, data cleaning, data visualization, and basic statistical calculations in R, and version control in github. Participants will leave with a small portfolio of relevant data visualizations and analyses completed using a real‐world public health dataset.
</center>

## Workshop goals

::: {layout-ncol=2}
- Learning to program (in R) can be fun and creative, and doesn’t have to be overwhelming or intimidating.
- Anyone can learn to write code.

![](images/learning_process_horst.png){fig-align="center"}

::: 

::: footer
[Artwork by Allison Horst](https://allisonhorst.com/everything-else)
:::

## Learning by doing

For some people, it’s easier to learn by doing, typing, and making mistakes. I’m one of those people. Others prefer to listen, think, and work through problems later on their own. 
<br><br>
**In this workshop, we’ll pause to do worked examples.** Sometimes these will be confusing. This is the point! We will learn together by trial and error. 
<br><br>
If you are more comfortable following along for now, feel free to just watch and try at home. But I really encourage you to try, the best way to learn R is to repeatedly do stuff wrong and then figure out the errors.


## Learning by doing

![](images/fully-expecting-to-hate-class.png){fig-align="center"}

::: footer
[Artwork by Allison Horst](https://allisonhorst.com/everything-else)
:::

## Goals for today

::: {.incremental}
- **Understand** what statistical programming is
- **Get acquainted** with Rstudio
- **Write your very first R code** (at least, of this workshop)
  - vectors
  - functions
  - accessing documentation
- **Explore github** to access course materials
:::

## Goals for today

- **Understand** what statistical programming is
- <span style="color:#DBDBDB;">**Get acquainted** with Rstudio</span>
- <span style="color:#DBDBDB;">**Write your very first R code** (at least, of this workshop)</span>
  - <span style="color:#DBDBDB;">vectors</span>
  - <span style="color:#DBDBDB;">functions</span>
  - <span style="color:#DBDBDB;">accessing documentation</span>
- <span style="color:#DBDBDB;">**Explore github** to access course materials</span>

# What is statistical programming, and why should I care?

## What is statistical programming?

Statistical programming is using code to clean, analyze, visualize, and interpret data.

![](images/reproducibility.jpg){fig-align="center"}

::: footer
[This illustration is created by Scriberia with The Turing Way community, used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3332807](https://zenodo.org/records/8169292)
:::

## What is R?

::: {layout-ncol=2}

::: {.incremental}
  - R is a programming language for statistical computing 
  - Created by Ross Ihaka and Robert Gentleman  in 1996 
  - R is open-source and free
  - Many people use R in different ways and for different purposes, but it’s defined specifically for data analysis and visualization (unlike other open-source languages like python)
::: 

![](images/r-logo.png){fig-align="center"}

::: 

::: footer
[The R logo is © 2016 The R Foundation](https://www.r-project.org/logo/)
::: 

## What is RStudio?

::: {layout-ncol=2}

::: {.incremental}
  - R Studio is, put simply, a place to write and run R code
  - It’s an IDE (integrated development environment) and supports both R and python
  - R is open-source and free
  - It’s also free (with enterprise upgrades)
  
::: 

![](images/pretty-r.png){fig-align="center"}

::: 

::: footer
[Artwork by Allison Horst](https://allisonhorst.com/everything-else)
:::

## Why learn R?

::: {.incremental}
  - Learning R helps you understand your data and understand how analysis works, whether you’re a researcher, a data scientist, or someone who collaborates with folks who do analysis
  - Coding helps you think rigorously about your questions
  - It’s free (vs. other more expensive tools like SAS or SPSS)
  - Sharable, reproducible code and research
  - Lots of academics/companies/agencies use it
-   It’s fun (honestly)

::: 

## Goals for today

- **Understand** what statistical programming is
- **Get acquainted** with Rstudio
- <span style="color:#DBDBDB;">**Write your very first R code** (at least, of this workshop)</span>
  - <span style="color:#DBDBDB;">vectors</span>
  - <span style="color:#DBDBDB;">functions</span>
  - <span style="color:#DBDBDB;">accessing documentation</span>
- <span style="color:#DBDBDB;">**Explore github** to access course materials</span>

# Getting acquainted with RStudio

## R Studio Console

![](images/rstudio-screenshot-1.jpg)

## R Studio Console

![](images/rstudio-screenshot-2.jpg)

## R Studio Console

![](images/rstudio-screenshot-3.jpg)

## R Studio Console

![](images/rstudio-screenshot-4.jpg)


## R Studio Console

![](images/rstudio-screenshot-5.jpg)

## Changing R Studio Appearance

::: {layout-ncol=2}

- Navigate from the top bar
  - -> Tools
  - -> Global options
  - -> Appearance
  - (then click “apply”)

  
![](images/rstudio-change-appearance.jpg)

:::

## 15 minute break <br> (and a note on worked examples)

  - If you haven't already, try to download R and Rstudio before tomorrow’s class. I’ll be around by Zoom or email if you have any questions, and can help troubleshoot.
  - Today, we’ll do some worked examples sharing my laptop. If you already have R and Rstudio installed on your laptop, feel free to follow along there.
  
## Goals for today

- **Understand** what statistical programming is
- **Get acquainted** with Rstudio
- **Write your very first R code** (at least, of this workshop)
  - vectors
  - functions
  - accessing documentation
- <span style="color:#DBDBDB;">**Explore github** to access course materials</span>

# R Basics

## Using R as a calculator

::: {layout-ncol=2}
  - R can do everything a basic calculator can do
  - Using R as a calculator is a great first step

![](images/calculator-comic.jpg)
:::

::: footer
[Comic by Jessica Wang](https://www.redbubble.com/people/comicsbyjess/explore?page=1&sortOrder=recent)
:::

## Using R as a calculator

```{r}
#| label: basic-math
#| echo: true
## Addition
1+1
## Subtraction
8-10
## Multiplication
5*2
## Division
88/44
```

## Using R as a calculator

```{r}
#| label: more-math
#| echo: true
## Logarithms
log(1)
## Square root
sqrt(64)
## Exponents
8^2
## Absolute value
abs(-1)
## Order of operations
(432+4)/2
```

## Now you try!

- Use R to do some basic math
  - Add two numbers together
  - Multiply three or more numbers
  - Take the square root of a number
  
## Objects

::: {.incremental}
- An object is something you save to R’s working memory
- It can be almost anything
  - A string (e.g., your name)
  - A number (e.g., 3.14)
  - A dataset (e.g., that file you have in Excel)
- We assign objects using a little arrow with the syntax (<-) 
- When doing data analysis, the most common object you’ll probably save is a dataframe, like an Excel or .csv file that you can access from within R (more on this later)

::: 

## Objects

```{r}
#| label: first-objects
#| echo: true
## Create an object named "my_first_object" with value 3.14
my_first_object <- 3.14
## print out the object we created
my_first_object
```

```{r}
#| label: second-objects
#| echo: true
## Create an object named "my_second_object" with value 1+1
my_second_object <- 1+1
## print out the object we created
my_second_object
```

```{r}
#| label: third-objects
#| echo: true
## Create an object named "my_third_object" with value "Steph"
my_third_object <- "Steph"
## print out the object we created
my_third_object
```

## Use (numeric) objects to do math

- Just like we did when we used R as a calculator, you can also use numeric objects to do math
- When you do this, the objects themselves don’t change unless you explicitly re-assign them to new variables 

## Use (numeric) objects to do math

```{r}
#| label: math-with-objects
#| echo: true
## reminder: print out value of my_first_object
my_first_object
## reminder: print out value of my_second_object
my_second_object
## multiply together
my_first_object*my_second_object
```

## Now you try!

::: {layout-ncol=2}

- Pick your favorite number, and save it as an object
- Pick another number, and save it as another object
- Do one basic calculation (e.g., addition) with your objects

![](images/trampoline.png){fig-align="center"}

::: 

::: footer
[Artwork by Allison Horst](https://allisonhorst.com/everything-else)
:::

## Data types in R

::: {.incremental}
- **numeric:** a number (e.g., -1, 0, 893243.343)
- **logical:** TRUE or FALSE (no quotations)
- **character:** letters and words (tricky – or a number stored as a string)

::: 

## Data types in R

- **numeric:** a number (e.g., -1, 0, 893243.343)
- **logical:** TRUE or FALSE (no quotations)
- **character:** letters and words (tricky – or a number stored as a string)
- the function `is()` will help us learn the data type of a given object

```{r}
#| label: intro-is
#| echo: true
is(3.14)
is(TRUE)
is("Steph")
```

## Numeric data

```{r}
#| label: numeric-data
#| echo: true
my_first_object
```

## Numeric data

```{r}
#| label: numeric-data-2
#| echo: true
my_first_object
```

```{r}
#| label: numeric-data-3
#| echo: true
is(my_first_object)
```

## Character data

```{r}
#| label: character-data
#| echo: true

policy <- "International Health Regulations (IHR)"
```

## Character data

```{r}
#| label: character-data-2
#| echo: true

policy <- "International Health Regulations (IHR)"
policy
```

```{r}
#| label: character-data-3
#| echo: true
is(policy)
```

## Logical data

```{r}
#| label: logical_data
#| echo: true

logical_example <- TRUE
```

## Logical data

```{r}
#| label: logical_data-2
#| echo: true

logical_example <- TRUE
logical_example
```

```{r}
#| label: logical_data-3
#| echo: true
is(logical_example)
```


## Check your understanding
```{r}
#| label: check-1
#| echo: true
#| eval: false
is(-1)
```

## Check your understanding

```{r}
#| echo: true
is(-1)
```


## Check your understanding

```{r}
#| echo: true
is(-1)
```

```{r}
#| label: check-2
#| echo: true
#| eval: false
is(FALSE)
```

## Check your understanding

```{r}
#| echo: true
is(-1)
```

```{r}
#| echo: true
is(FALSE)
```

## Check your understanding

```{r}
#| echo: true
is(-1)
```

```{r}
#| echo: true
is(FALSE)
```

```{r}
#| label: check-3
#| echo: true
#| eval: false
is("What is this?")
```


## Check your understanding

```{r}
#| echo: true
is(-1)
```

```{r}
#| echo: true
is(FALSE)
```

```{r}
#| echo: true
is("What is this?")
```

## Rules for naming objects

- General naming requirement: a variable name can’t start with a number or a dot (.)
- R is case sensitive (‘A’ is different than ‘a’)
- General rules of thumb: aim for consistency
  - snake_case
  - camelCase
  - whatever.this.is
- Chose a name you’ll understand when you open your code the next day, or when someone else reviews it

## 

![](images/case-graphic-1.png){fig-align="center"}

::: footer
[Artwork by Allison Horst](https://allisonhorst.com/everything-else)
:::

## 

![](images/case-graphic-2.png){fig-align="center"}

::: footer
[Artwork by Allison Horst](https://allisonhorst.com/everything-else)
:::

## Now you try!

- Create three new objects, with any allowable names you want. Try to use a consistent naming style.
  - Numeric (we already did this, but practice is good)
  - Character
  - Logical
  
## Vectors

::: {layout-ncol=2}

::: {.incremental}
- Vectors are grouped data elements in a specific order
- For example, data in a specific column in Excel
- When you’ve thought previously about data analysis, you probably think about vectors, even if you didn’t use that name
::: 
::: 

## Vectors

::: {layout-ncol=2}

- Vectors are grouped data elements in a specific order
- For example, data in a specific column in Excel
- When you’ve thought previously about data analysis, you probably think about vectors, even if you didn’t use that name

![](images/vector-graphic.jpg){fig-align="center"}

::: 

## Vectors

```{r}
#| label: vectors
#| echo: true
diseases <- c("HIV", "TB", "Malaria")
```

## Vectors

```{r}
#| echo: true
diseases <- c("HIV", "TB", "Malaria")
diseases
```

```{r}
#| echo: true
is(diseases)
```

## Vectors

```{r}
#| echo: true
diseases <- c("HIV", "TB", "Malaria")
diseases
```

```{r}
#| echo: true
is(diseases)
```

```{r}
#| echo: true
values <- c(28, 84, 432)
```

## Vectors

```{r}
#| echo: true
diseases <- c("HIV", "TB", "Malaria")
diseases
```

```{r}
#| echo: true
is(diseases)
```

```{r}
#| echo: true
values <- c(28, 84, 432)
values
```

```{r}
#| echo: true
is(values)
```

## Vectors

- Vectors can contain strings, numbers, or other data types
- But they can't contain multiple data types at once

```{r}
#| echo: true
c("HIV", "Malaria", 4325)
```

## Vectors

- Vectors can contain strings, numbers, or other data types
- But they can't contain multiple data types at once

```{r}
#| echo: true
c("HIV", "Malaria", 4325)
```

- What happened here?

## Vectors

- Vectors can contain strings, numbers, or other data types
- But they can't contain multiple data types at once

```{r}
#| echo: true
c("HIV", "Malaria", 4325)
```

- What happened here?
  - The number 4325 was converted into a string
  
## Now you try!

- Make two vectors in R and assign them to objects.
  - Numeric
  - String
  
## Vectorized Calculations

```{r}
#| echo: true
c(1,2,3,4,5)+1
```

## Vectorized Calculations

```{r}
#| echo: true
c(1,2,3,4,5)+1
```

```{r}
#| echo: true
c(1,2,3,4,5)*2
```

## Vectorized Calculations

```{r}
#| echo: true
c(1,2,3,4,5)+1
```

```{r}
#| echo: true
c(1,2,3,4,5)*2
```

```{r}
#| echo: true
c(1,2,3,4,5) + c(8,0,0,0,0)
```

## Vectorized Calculations

```{r}
#| echo: true
#| warning: true
c(1,2,3,4,5) + c(8,0)
```

## Vectorized Calculations

```{r}
#| echo: true
#| warning: true
c(1,2,3,4,5) + c(8,0)
```

- Pay attention to these warnings
- This is called *vector recycling* and it can cause major errors

## Functions

::: {.incremental}
  - Functions are instructions to perform a task
  - They are algorithms, or consistent set of rules
  - R has built-in functions for many basic things
  - Functions generally look like this: `function(object)`
  - We can also “add on” extra functions by loading new libraries (we’ll get to this later), or we can write our own functions to do whatever we want
  
:::

## Functions

::: {.incremental}
  - Most functions in R are vectorized
    - This means they act on all items in a vector
  - Why does this matter?
    - If you misunderstand it, your math will be wrong
    - It’s useful for basic calculations and analysis:
      - divide all numbers by 100 to calculate a %
      - multiply per-capita rates by total population
  
:::

## Functions

```{r}
#| echo: true
mean(c(1,2,3,4,5))
```

## Functions

```{r}
#| echo: true
mean(c(1,2,3,4,5))
```

```{r}
#| echo: true
sd(c(1,2,3,4,5))
```

## Functions

```{r}
#| echo: true
mean(c(1,2,3,4,5))
```

```{r}
#| echo: true
sd(c(1,2,3,4,5))
```

```{r}
#| echo: true
summary(c(1,2,3,4,5))
```

## Learn more about functions

::: {layout-ncol=2}

- Use `?summary` or `help(summary)` to learn more about functions
- Results will show in "help" section of RStudio

![](images/summary-r-studio.jpg){fig-align="center"}

::: 

## Now you try!

  - Take the average of three or more numbers
  - Use “?” to learn more about the function sd()

## Goals for today

- **Understand** what statistical programming is
- **Get acquainted** with Rstudio
- **Write your very first R code** (at least, of this workshop)
  - vectors
  - functions
  - accessing documentation
- **Explore github** to access course materials

# Accessing course materials

## What is github?

::: {.incremental}
- Have you ever saved a bunch of versions of a paper on your computer with different file names at different dates or times of day?
- Backups are useful to save progress, understand what we’ve done before, and look into problems/bugs
- Github is a tool do help do this with code
::: 

## What is github?

<center>

We’ll talk more about github later in this workshop. For now, I’d like you to be able to use it to access course materials any time you’d like to.
<br><br><br>
<https://github.com/seaneff/data-science-basics-2024>
</center>

## Todo: add graphics
See 2023 powerpoint

